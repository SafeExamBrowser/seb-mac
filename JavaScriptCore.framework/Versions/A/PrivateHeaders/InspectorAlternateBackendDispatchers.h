/*
 * Copyright (C) 2013 Google Inc. All rights reserved.
 * Copyright (C) 2013-2016 Apple Inc. All rights reserved.
 * Copyright (C) 2014 University of Washington. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

// DO NOT EDIT THIS FILE. It is automatically generated from CombinedDomains.json by the script: Source/JavaScriptCore/inspector/scripts/generate-inspector-protocol-bindings.py

#pragma once

#if ENABLE(INSPECTOR_ALTERNATE_DISPATCHERS)

#include "InspectorBackendDispatcher.h"
#include "InspectorFrontendRouter.h"
#include "InspectorProtocolObjects.h"

namespace Inspector {

class AlternateBackendDispatcher {
public:
    void setBackendDispatcher(RefPtr<BackendDispatcher>&& dispatcher) { m_backendDispatcher = WTFMove(dispatcher); }
    BackendDispatcher* backendDispatcher() const { return m_backendDispatcher.get(); }
private:
    RefPtr<BackendDispatcher> m_backendDispatcher;
};


class AlternateAnimationBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateAnimationBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void requestEffectTarget(long protocol_requestId, const String& animationId) = 0;
    virtual void resolveAnimation(long protocol_requestId, const String& animationId, const String& opt_objectGroup) = 0;
    virtual void startTracking(long protocol_requestId) = 0;
    virtual void stopTracking(long protocol_requestId) = 0;
};

class AlternateApplicationCacheBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateApplicationCacheBackendDispatcher() { }
    virtual void getFramesWithManifests(long protocol_requestId) = 0;
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void getManifestForFrame(long protocol_requestId, const String& frameId) = 0;
    virtual void getApplicationCacheForFrame(long protocol_requestId, const String& frameId) = 0;
};

class AlternateAuditBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateAuditBackendDispatcher() { }
    virtual void setup(long protocol_requestId, Optional<int>&& opt_contextId) = 0;
    virtual void run(long protocol_requestId, const String& test, Optional<int>&& opt_contextId) = 0;
    virtual void teardown(long protocol_requestId) = 0;
};

class AlternateBrowserBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateBrowserBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
};

#if defined(ENABLE_RESOURCE_USAGE) && ENABLE_RESOURCE_USAGE
class AlternateCPUProfilerBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateCPUProfilerBackendDispatcher() { }
    virtual void startTracking(long protocol_requestId) = 0;
    virtual void stopTracking(long protocol_requestId) = 0;
};
#endif // defined(ENABLE_RESOURCE_USAGE) && ENABLE_RESOURCE_USAGE

class AlternateCSSBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateCSSBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void getMatchedStylesForNode(long protocol_requestId, int nodeId, Optional<bool>&& opt_includePseudo, Optional<bool>&& opt_includeInherited) = 0;
    virtual void getInlineStylesForNode(long protocol_requestId, int nodeId) = 0;
    virtual void getComputedStyleForNode(long protocol_requestId, int nodeId) = 0;
    virtual void getAllStyleSheets(long protocol_requestId) = 0;
    virtual void getStyleSheet(long protocol_requestId, const String& styleSheetId) = 0;
    virtual void getStyleSheetText(long protocol_requestId, const String& styleSheetId) = 0;
    virtual void setStyleSheetText(long protocol_requestId, const String& styleSheetId, const String& text) = 0;
    virtual void setStyleText(long protocol_requestId, Ref<JSON::Object>&& styleId, const String& text) = 0;
    virtual void setRuleSelector(long protocol_requestId, Ref<JSON::Object>&& ruleId, const String& selector) = 0;
    virtual void createStyleSheet(long protocol_requestId, const String& frameId) = 0;
    virtual void addRule(long protocol_requestId, const String& styleSheetId, const String& selector) = 0;
    virtual void getSupportedCSSProperties(long protocol_requestId) = 0;
    virtual void getSupportedSystemFontFamilyNames(long protocol_requestId) = 0;
    virtual void forcePseudoState(long protocol_requestId, int nodeId, Ref<JSON::Array>&& forcedPseudoClasses) = 0;
};

class AlternateCanvasBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateCanvasBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void requestNode(long protocol_requestId, const String& canvasId) = 0;
    virtual void requestContent(long protocol_requestId, const String& canvasId) = 0;
    virtual void requestClientNodes(long protocol_requestId, const String& canvasId) = 0;
    virtual void resolveContext(long protocol_requestId, const String& canvasId, const String& opt_objectGroup) = 0;
    virtual void setRecordingAutoCaptureFrameCount(long protocol_requestId, int count) = 0;
    virtual void startRecording(long protocol_requestId, const String& canvasId, Optional<int>&& opt_frameCount, Optional<int>&& opt_memoryLimit) = 0;
    virtual void stopRecording(long protocol_requestId, const String& canvasId) = 0;
#if (defined(ENABLE_WEBGL) && ENABLE_WEBGL) || (defined(ENABLE_WEBGPU) && ENABLE_WEBGPU)
    virtual void requestShaderSource(long protocol_requestId, const String& programId, const String& shaderType) = 0;
#endif // (defined(ENABLE_WEBGL) && ENABLE_WEBGL) || (defined(ENABLE_WEBGPU) && ENABLE_WEBGPU)
#if (defined(ENABLE_WEBGL) && ENABLE_WEBGL) || (defined(ENABLE_WEBGPU) && ENABLE_WEBGPU)
    virtual void updateShader(long protocol_requestId, const String& programId, const String& shaderType, const String& source) = 0;
#endif // (defined(ENABLE_WEBGL) && ENABLE_WEBGL) || (defined(ENABLE_WEBGPU) && ENABLE_WEBGPU)
#if defined(ENABLE_WEBGL) && ENABLE_WEBGL
    virtual void setShaderProgramDisabled(long protocol_requestId, const String& programId, bool disabled) = 0;
#endif // defined(ENABLE_WEBGL) && ENABLE_WEBGL
#if defined(ENABLE_WEBGL) && ENABLE_WEBGL
    virtual void setShaderProgramHighlighted(long protocol_requestId, const String& programId, bool highlighted) = 0;
#endif // defined(ENABLE_WEBGL) && ENABLE_WEBGL
};

class AlternateConsoleBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateConsoleBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void clearMessages(long protocol_requestId) = 0;
    virtual void getLoggingChannels(long protocol_requestId) = 0;
    virtual void setLoggingChannelLevel(long protocol_requestId, const String& source, const String& level) = 0;
};

class AlternateDOMBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateDOMBackendDispatcher() { }
    virtual void getDocument(long protocol_requestId) = 0;
    virtual void requestChildNodes(long protocol_requestId, int nodeId, Optional<int>&& opt_depth) = 0;
    virtual void querySelector(long protocol_requestId, int nodeId, const String& selector) = 0;
    virtual void querySelectorAll(long protocol_requestId, int nodeId, const String& selector) = 0;
    virtual void setNodeName(long protocol_requestId, int nodeId, const String& name) = 0;
    virtual void setNodeValue(long protocol_requestId, int nodeId, const String& value) = 0;
    virtual void removeNode(long protocol_requestId, int nodeId) = 0;
    virtual void setAttributeValue(long protocol_requestId, int nodeId, const String& name, const String& value) = 0;
    virtual void setAttributesAsText(long protocol_requestId, int nodeId, const String& text, const String& opt_name) = 0;
    virtual void removeAttribute(long protocol_requestId, int nodeId, const String& name) = 0;
    virtual void getSupportedEventNames(long protocol_requestId) = 0;
#if defined(ENABLE_INSPECTOR_ALTERNATE_DISPATCHERS) && ENABLE_INSPECTOR_ALTERNATE_DISPATCHERS
    virtual void getDataBindingsForNode(long protocol_requestId, int nodeId) = 0;
#endif // defined(ENABLE_INSPECTOR_ALTERNATE_DISPATCHERS) && ENABLE_INSPECTOR_ALTERNATE_DISPATCHERS
#if defined(ENABLE_INSPECTOR_ALTERNATE_DISPATCHERS) && ENABLE_INSPECTOR_ALTERNATE_DISPATCHERS
    virtual void getAssociatedDataForNode(long protocol_requestId, int nodeId) = 0;
#endif // defined(ENABLE_INSPECTOR_ALTERNATE_DISPATCHERS) && ENABLE_INSPECTOR_ALTERNATE_DISPATCHERS
    virtual void getEventListenersForNode(long protocol_requestId, int nodeId) = 0;
    virtual void setEventListenerDisabled(long protocol_requestId, int eventListenerId, bool disabled) = 0;
    virtual void setBreakpointForEventListener(long protocol_requestId, int eventListenerId, RefPtr<JSON::Object>&& opt_options) = 0;
    virtual void removeBreakpointForEventListener(long protocol_requestId, int eventListenerId) = 0;
    virtual void getAccessibilityPropertiesForNode(long protocol_requestId, int nodeId) = 0;
    virtual void getOuterHTML(long protocol_requestId, int nodeId) = 0;
    virtual void setOuterHTML(long protocol_requestId, int nodeId, const String& outerHTML) = 0;
    virtual void insertAdjacentHTML(long protocol_requestId, int nodeId, const String& position, const String& html) = 0;
    virtual void performSearch(long protocol_requestId, const String& query, RefPtr<JSON::Array>&& opt_nodeIds, Optional<bool>&& opt_caseSensitive) = 0;
    virtual void getSearchResults(long protocol_requestId, const String& searchId, int fromIndex, int toIndex) = 0;
    virtual void discardSearchResults(long protocol_requestId, const String& searchId) = 0;
    virtual void requestNode(long protocol_requestId, const String& objectId) = 0;
#if defined(WTF_PLATFORM_IOS_FAMILY) && WTF_PLATFORM_IOS_FAMILY
    virtual void setInspectModeEnabled(long protocol_requestId, bool enabled, RefPtr<JSON::Object>&& opt_highlightConfig) = 0;
#endif // defined(WTF_PLATFORM_IOS_FAMILY) && WTF_PLATFORM_IOS_FAMILY
#if !(defined(WTF_PLATFORM_IOS_FAMILY) && WTF_PLATFORM_IOS_FAMILY)
    virtual void setInspectModeEnabled(long protocol_requestId, bool enabled, RefPtr<JSON::Object>&& opt_highlightConfig, Optional<bool>&& opt_showRulers) = 0;
#endif // !(defined(WTF_PLATFORM_IOS_FAMILY) && WTF_PLATFORM_IOS_FAMILY)
    virtual void highlightRect(long protocol_requestId, int x, int y, int width, int height, RefPtr<JSON::Object>&& opt_color, RefPtr<JSON::Object>&& opt_outlineColor, Optional<bool>&& opt_usePageCoordinates) = 0;
    virtual void highlightQuad(long protocol_requestId, Ref<JSON::Array>&& quad, RefPtr<JSON::Object>&& opt_color, RefPtr<JSON::Object>&& opt_outlineColor, Optional<bool>&& opt_usePageCoordinates) = 0;
    virtual void highlightSelector(long protocol_requestId, Ref<JSON::Object>&& highlightConfig, const String& selectorString, const String& opt_frameId) = 0;
    virtual void highlightNode(long protocol_requestId, Ref<JSON::Object>&& highlightConfig, Optional<int>&& opt_nodeId, const String& opt_objectId) = 0;
    virtual void highlightNodeList(long protocol_requestId, Ref<JSON::Array>&& nodeIds, Ref<JSON::Object>&& highlightConfig) = 0;
    virtual void hideHighlight(long protocol_requestId) = 0;
    virtual void highlightFrame(long protocol_requestId, const String& frameId, RefPtr<JSON::Object>&& opt_contentColor, RefPtr<JSON::Object>&& opt_contentOutlineColor) = 0;
    virtual void pushNodeByPathToFrontend(long protocol_requestId, const String& path) = 0;
    virtual void resolveNode(long protocol_requestId, int nodeId, const String& opt_objectGroup) = 0;
    virtual void getAttributes(long protocol_requestId, int nodeId) = 0;
    virtual void moveTo(long protocol_requestId, int nodeId, int targetNodeId, Optional<int>&& opt_insertBeforeNodeId) = 0;
    virtual void undo(long protocol_requestId) = 0;
    virtual void redo(long protocol_requestId) = 0;
    virtual void markUndoableState(long protocol_requestId) = 0;
    virtual void focus(long protocol_requestId, int nodeId) = 0;
    virtual void setInspectedNode(long protocol_requestId, int nodeId) = 0;
    virtual void setAllowEditingUserAgentShadowTrees(long protocol_requestId, bool allow) = 0;
};

class AlternateDOMDebuggerBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateDOMDebuggerBackendDispatcher() { }
    virtual void setDOMBreakpoint(long protocol_requestId, int nodeId, const String& type, RefPtr<JSON::Object>&& opt_options) = 0;
    virtual void removeDOMBreakpoint(long protocol_requestId, int nodeId, const String& type) = 0;
    virtual void setEventBreakpoint(long protocol_requestId, const String& breakpointType, const String& opt_eventName, RefPtr<JSON::Object>&& opt_options) = 0;
    virtual void removeEventBreakpoint(long protocol_requestId, const String& breakpointType, const String& opt_eventName) = 0;
    virtual void setURLBreakpoint(long protocol_requestId, const String& url, Optional<bool>&& opt_isRegex, RefPtr<JSON::Object>&& opt_options) = 0;
    virtual void removeURLBreakpoint(long protocol_requestId, const String& url, Optional<bool>&& opt_isRegex) = 0;
};

class AlternateDOMStorageBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateDOMStorageBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void getDOMStorageItems(long protocol_requestId, Ref<JSON::Object>&& storageId) = 0;
    virtual void setDOMStorageItem(long protocol_requestId, Ref<JSON::Object>&& storageId, const String& key, const String& value) = 0;
    virtual void removeDOMStorageItem(long protocol_requestId, Ref<JSON::Object>&& storageId, const String& key) = 0;
    virtual void clearDOMStorageItems(long protocol_requestId, Ref<JSON::Object>&& storageId) = 0;
};

class AlternateDatabaseBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateDatabaseBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void getDatabaseTableNames(long protocol_requestId, const String& databaseId) = 0;
    virtual void executeSQL(long protocol_requestId, const String& databaseId, const String& query) = 0;
};

class AlternateDebuggerBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateDebuggerBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void setAsyncStackTraceDepth(long protocol_requestId, int depth) = 0;
    virtual void setBreakpointsActive(long protocol_requestId, bool active) = 0;
    virtual void setBreakpointByUrl(long protocol_requestId, int lineNumber, const String& opt_url, const String& opt_urlRegex, Optional<int>&& opt_columnNumber, RefPtr<JSON::Object>&& opt_options) = 0;
    virtual void setBreakpoint(long protocol_requestId, Ref<JSON::Object>&& location, RefPtr<JSON::Object>&& opt_options) = 0;
    virtual void removeBreakpoint(long protocol_requestId, const String& breakpointId) = 0;
    virtual void continueUntilNextRunLoop(long protocol_requestId) = 0;
    virtual void continueToLocation(long protocol_requestId, Ref<JSON::Object>&& location) = 0;
    virtual void stepNext(long protocol_requestId) = 0;
    virtual void stepOver(long protocol_requestId) = 0;
    virtual void stepInto(long protocol_requestId) = 0;
    virtual void stepOut(long protocol_requestId) = 0;
    virtual void pause(long protocol_requestId) = 0;
    virtual void resume(long protocol_requestId) = 0;
    virtual void searchInContent(long protocol_requestId, const String& scriptId, const String& query, Optional<bool>&& opt_caseSensitive, Optional<bool>&& opt_isRegex) = 0;
    virtual void getScriptSource(long protocol_requestId, const String& scriptId) = 0;
    virtual void getFunctionDetails(long protocol_requestId, const String& functionId) = 0;
    virtual void setPauseOnDebuggerStatements(long protocol_requestId, bool enabled, RefPtr<JSON::Object>&& opt_options) = 0;
    virtual void setPauseOnExceptions(long protocol_requestId, const String& state, RefPtr<JSON::Object>&& opt_options) = 0;
    virtual void setPauseOnAssertions(long protocol_requestId, bool enabled, RefPtr<JSON::Object>&& opt_options) = 0;
    virtual void setPauseOnMicrotasks(long protocol_requestId, bool enabled, RefPtr<JSON::Object>&& opt_options) = 0;
    virtual void setPauseForInternalScripts(long protocol_requestId, bool shouldPause) = 0;
    virtual void evaluateOnCallFrame(long protocol_requestId, const String& callFrameId, const String& expression, const String& opt_objectGroup, Optional<bool>&& opt_includeCommandLineAPI, Optional<bool>&& opt_doNotPauseOnExceptionsAndMuteConsole, Optional<bool>&& opt_returnByValue, Optional<bool>&& opt_generatePreview, Optional<bool>&& opt_saveResult, Optional<bool>&& opt_emulateUserGesture) = 0;
    virtual void setShouldBlackboxURL(long protocol_requestId, const String& url, bool shouldBlackbox, Optional<bool>&& opt_caseSensitive, Optional<bool>&& opt_isRegex) = 0;
};

class AlternateHeapBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateHeapBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void gc(long protocol_requestId) = 0;
    virtual void snapshot(long protocol_requestId) = 0;
    virtual void startTracking(long protocol_requestId) = 0;
    virtual void stopTracking(long protocol_requestId) = 0;
    virtual void getPreview(long protocol_requestId, int heapObjectId) = 0;
    virtual void getRemoteObject(long protocol_requestId, int heapObjectId, const String& opt_objectGroup) = 0;
};

#if defined(ENABLE_INDEXED_DATABASE) && ENABLE_INDEXED_DATABASE
class AlternateIndexedDBBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateIndexedDBBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void requestDatabaseNames(long protocol_requestId, const String& securityOrigin) = 0;
    virtual void requestDatabase(long protocol_requestId, const String& securityOrigin, const String& databaseName) = 0;
    virtual void requestData(long protocol_requestId, const String& securityOrigin, const String& databaseName, const String& objectStoreName, const String& indexName, int skipCount, int pageSize, RefPtr<JSON::Object>&& opt_keyRange) = 0;
    virtual void clearObjectStore(long protocol_requestId, const String& securityOrigin, const String& databaseName, const String& objectStoreName) = 0;
};
#endif // defined(ENABLE_INDEXED_DATABASE) && ENABLE_INDEXED_DATABASE

class AlternateInspectorBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateInspectorBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void initialized(long protocol_requestId) = 0;
};

class AlternateLayerTreeBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateLayerTreeBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void layersForNode(long protocol_requestId, int nodeId) = 0;
    virtual void reasonsForCompositingLayer(long protocol_requestId, const String& layerId) = 0;
};

#if defined(ENABLE_RESOURCE_USAGE) && ENABLE_RESOURCE_USAGE
class AlternateMemoryBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateMemoryBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void startTracking(long protocol_requestId) = 0;
    virtual void stopTracking(long protocol_requestId) = 0;
};
#endif // defined(ENABLE_RESOURCE_USAGE) && ENABLE_RESOURCE_USAGE

class AlternateNetworkBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateNetworkBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void setExtraHTTPHeaders(long protocol_requestId, Ref<JSON::Object>&& headers) = 0;
    virtual void getResponseBody(long protocol_requestId, const String& requestId) = 0;
    virtual void setResourceCachingDisabled(long protocol_requestId, bool disabled) = 0;
    virtual void loadResource(long protocol_requestId, const String& frameId, const String& url) = 0;
    virtual void getSerializedCertificate(long protocol_requestId, const String& requestId) = 0;
    virtual void resolveWebSocket(long protocol_requestId, const String& requestId, const String& opt_objectGroup) = 0;
    virtual void setInterceptionEnabled(long protocol_requestId, bool enabled) = 0;
    virtual void addInterception(long protocol_requestId, const String& url, const String& stage, Optional<bool>&& opt_caseSensitive, Optional<bool>&& opt_isRegex) = 0;
    virtual void removeInterception(long protocol_requestId, const String& url, const String& stage, Optional<bool>&& opt_caseSensitive, Optional<bool>&& opt_isRegex) = 0;
    virtual void interceptContinue(long protocol_requestId, const String& requestId, const String& stage) = 0;
    virtual void interceptWithRequest(long protocol_requestId, const String& requestId, const String& opt_url, const String& opt_method, RefPtr<JSON::Object>&& opt_headers, const String& opt_postData) = 0;
    virtual void interceptWithResponse(long protocol_requestId, const String& requestId, const String& content, bool base64Encoded, const String& opt_mimeType, Optional<int>&& opt_status, const String& opt_statusText, RefPtr<JSON::Object>&& opt_headers) = 0;
    virtual void interceptRequestWithResponse(long protocol_requestId, const String& requestId, const String& content, bool base64Encoded, const String& mimeType, int status, const String& statusText, Ref<JSON::Object>&& headers) = 0;
    virtual void interceptRequestWithError(long protocol_requestId, const String& requestId, const String& errorType) = 0;
};

class AlternatePageBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternatePageBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void reload(long protocol_requestId, Optional<bool>&& opt_ignoreCache, Optional<bool>&& opt_revalidateAllResources) = 0;
    virtual void navigate(long protocol_requestId, const String& url) = 0;
    virtual void overrideUserAgent(long protocol_requestId, const String& opt_value) = 0;
    virtual void overrideSetting(long protocol_requestId, const String& setting, Optional<bool>&& opt_value) = 0;
    virtual void getCookies(long protocol_requestId) = 0;
    virtual void setCookie(long protocol_requestId, Ref<JSON::Object>&& cookie) = 0;
    virtual void deleteCookie(long protocol_requestId, const String& cookieName, const String& url) = 0;
    virtual void getResourceTree(long protocol_requestId) = 0;
    virtual void getResourceContent(long protocol_requestId, const String& frameId, const String& url) = 0;
    virtual void setBootstrapScript(long protocol_requestId, const String& opt_source) = 0;
    virtual void searchInResource(long protocol_requestId, const String& frameId, const String& url, const String& query, Optional<bool>&& opt_caseSensitive, Optional<bool>&& opt_isRegex, const String& opt_requestId) = 0;
    virtual void searchInResources(long protocol_requestId, const String& text, Optional<bool>&& opt_caseSensitive, Optional<bool>&& opt_isRegex) = 0;
#if !(defined(WTF_PLATFORM_IOS_FAMILY) && WTF_PLATFORM_IOS_FAMILY)
    virtual void setShowRulers(long protocol_requestId, bool result) = 0;
#endif // !(defined(WTF_PLATFORM_IOS_FAMILY) && WTF_PLATFORM_IOS_FAMILY)
    virtual void setShowPaintRects(long protocol_requestId, bool result) = 0;
    virtual void setEmulatedMedia(long protocol_requestId, const String& media) = 0;
#if (defined(ENABLE_DARK_MODE_CSS) && ENABLE_DARK_MODE_CSS) || (defined(HAVE_OS_DARK_MODE_SUPPORT) && HAVE_OS_DARK_MODE_SUPPORT)
    virtual void setForcedAppearance(long protocol_requestId, const String& opt_appearance) = 0;
#endif // (defined(ENABLE_DARK_MODE_CSS) && ENABLE_DARK_MODE_CSS) || (defined(HAVE_OS_DARK_MODE_SUPPORT) && HAVE_OS_DARK_MODE_SUPPORT)
    virtual void snapshotNode(long protocol_requestId, int nodeId) = 0;
    virtual void snapshotRect(long protocol_requestId, int x, int y, int width, int height, const String& coordinateSystem) = 0;
#if (defined(ENABLE_WEB_ARCHIVE) && ENABLE_WEB_ARCHIVE) && (defined(USE_CF) && USE_CF)
    virtual void archive(long protocol_requestId) = 0;
#endif // (defined(ENABLE_WEB_ARCHIVE) && ENABLE_WEB_ARCHIVE) && (defined(USE_CF) && USE_CF)
#if !(defined(WTF_PLATFORM_COCOA) && WTF_PLATFORM_COCOA)
    virtual void setScreenSizeOverride(long protocol_requestId, Optional<int>&& opt_width, Optional<int>&& opt_height) = 0;
#endif // !(defined(WTF_PLATFORM_COCOA) && WTF_PLATFORM_COCOA)
};

class AlternateRuntimeBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateRuntimeBackendDispatcher() { }
    virtual void parse(long protocol_requestId, const String& source) = 0;
    virtual void evaluate(long protocol_requestId, const String& expression, const String& opt_objectGroup, Optional<bool>&& opt_includeCommandLineAPI, Optional<bool>&& opt_doNotPauseOnExceptionsAndMuteConsole, Optional<int>&& opt_contextId, Optional<bool>&& opt_returnByValue, Optional<bool>&& opt_generatePreview, Optional<bool>&& opt_saveResult, Optional<bool>&& opt_emulateUserGesture) = 0;
    virtual void awaitPromise(long protocol_requestId, const String& promiseObjectId, Optional<bool>&& opt_returnByValue, Optional<bool>&& opt_generatePreview, Optional<bool>&& opt_saveResult) = 0;
    virtual void callFunctionOn(long protocol_requestId, const String& objectId, const String& functionDeclaration, RefPtr<JSON::Array>&& opt_arguments, Optional<bool>&& opt_doNotPauseOnExceptionsAndMuteConsole, Optional<bool>&& opt_returnByValue, Optional<bool>&& opt_generatePreview, Optional<bool>&& opt_emulateUserGesture) = 0;
    virtual void getPreview(long protocol_requestId, const String& objectId) = 0;
    virtual void getProperties(long protocol_requestId, const String& objectId, Optional<bool>&& opt_ownProperties, Optional<int>&& opt_fetchStart, Optional<int>&& opt_fetchCount, Optional<bool>&& opt_generatePreview) = 0;
    virtual void getDisplayableProperties(long protocol_requestId, const String& objectId, Optional<int>&& opt_fetchStart, Optional<int>&& opt_fetchCount, Optional<bool>&& opt_generatePreview) = 0;
    virtual void getCollectionEntries(long protocol_requestId, const String& objectId, const String& opt_objectGroup, Optional<int>&& opt_fetchStart, Optional<int>&& opt_fetchCount) = 0;
    virtual void saveResult(long protocol_requestId, Ref<JSON::Object>&& value, Optional<int>&& opt_contextId) = 0;
    virtual void setSavedResultAlias(long protocol_requestId, const String& opt_alias) = 0;
    virtual void releaseObject(long protocol_requestId, const String& objectId) = 0;
    virtual void releaseObjectGroup(long protocol_requestId, const String& objectGroup) = 0;
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void getRuntimeTypesForVariablesAtOffsets(long protocol_requestId, Ref<JSON::Array>&& locations) = 0;
    virtual void enableTypeProfiler(long protocol_requestId) = 0;
    virtual void disableTypeProfiler(long protocol_requestId) = 0;
    virtual void enableControlFlowProfiler(long protocol_requestId) = 0;
    virtual void disableControlFlowProfiler(long protocol_requestId) = 0;
    virtual void getBasicBlocks(long protocol_requestId, const String& sourceID) = 0;
};

class AlternateScriptProfilerBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateScriptProfilerBackendDispatcher() { }
    virtual void startTracking(long protocol_requestId, Optional<bool>&& opt_includeSamples) = 0;
    virtual void stopTracking(long protocol_requestId) = 0;
};

#if defined(ENABLE_SERVICE_WORKER) && ENABLE_SERVICE_WORKER
class AlternateServiceWorkerBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateServiceWorkerBackendDispatcher() { }
    virtual void getInitializationInfo(long protocol_requestId) = 0;
};
#endif // defined(ENABLE_SERVICE_WORKER) && ENABLE_SERVICE_WORKER

class AlternateTargetBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateTargetBackendDispatcher() { }
    virtual void setPauseOnStart(long protocol_requestId, bool pauseOnStart) = 0;
    virtual void resume(long protocol_requestId, const String& targetId) = 0;
    virtual void sendMessageToTarget(long protocol_requestId, const String& targetId, const String& message) = 0;
};

class AlternateTimelineBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateTimelineBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void start(long protocol_requestId, Optional<int>&& opt_maxCallStackDepth) = 0;
    virtual void stop(long protocol_requestId) = 0;
    virtual void setAutoCaptureEnabled(long protocol_requestId, bool enabled) = 0;
    virtual void setInstruments(long protocol_requestId, Ref<JSON::Array>&& instruments) = 0;
};

class AlternateWorkerBackendDispatcher : public AlternateBackendDispatcher {
public:
    virtual ~AlternateWorkerBackendDispatcher() { }
    virtual void enable(long protocol_requestId) = 0;
    virtual void disable(long protocol_requestId) = 0;
    virtual void initialized(long protocol_requestId, const String& workerId) = 0;
    virtual void sendMessageToWorker(long protocol_requestId, const String& workerId, const String& message) = 0;
};

} // namespace Inspector

#endif // ENABLE(INSPECTOR_ALTERNATE_DISPATCHERS)
